# Pre-commit hooks for GymIntel
# Install with: pip install pre-commit && pre-commit install

repos:
  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        args: [--line-length=127]
        language_version: python3

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--line-length=127, --profile=black]

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=127, --extend-ignore=E203,W503]

  # Security scanning
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-ll, --skip=B101]

  # General hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-merge-conflict
      - id: debug-statements
      - id: check-json
      - id: pretty-format-json
        args: [--autofix, --indent=2]

  # Documentation checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-docstring-first

  # Custom local hooks
  - repo: local
    hooks:
      - id: run-smoke-tests
        name: Run smoke tests
        entry: python3
        args: [-c, "
          try:
            from gym_finder import GymFinder;
            from yelp_service import YelpService;
            from google_places_service import GooglePlacesService;
            gf = GymFinder();
            print('✅ Smoke tests passed');
          except Exception as e:
            print(f'❌ Smoke tests failed: {e}');
            exit(1)
        "]
        language: system
        pass_filenames: false
        always_run: true

      - id: check-api-keys
        name: Check API key configuration
        entry: python3
        args: [-c, "
          import os;
          from dotenv import load_dotenv;
          load_dotenv();
          yelp_key = os.getenv('YELP_API_KEY');
          google_key = os.getenv('GOOGLE_PLACES_API_KEY');
          if not yelp_key or yelp_key == 'your_yelp_api_key_here':
            print('⚠️  YELP_API_KEY not configured in .env');
          if not google_key or google_key == 'your_google_places_api_key_here':
            print('⚠️  GOOGLE_PLACES_API_KEY not configured in .env');
          print('✅ API key check completed')
        "]
        language: system
        pass_filenames: false
        always_run: true

      - id: performance-check
        name: Quick performance check
        entry: python3
        args: [-c, "
          import time;
          from gym_finder import GymFinder;
          gf = GymFinder();
          start = time.time();
          for i in range(100):
            gf.normalize_address(f'{i} Main St');
          elapsed = time.time() - start;
          if elapsed > 0.5:
            print(f'❌ Performance degradation: {elapsed:.3f}s > 0.5s');
            exit(1);
          print(f'✅ Performance OK: {elapsed:.3f}s for 100 address normalizations')
        "]
        language: system
        pass_filenames: false
        files: \.(py)$