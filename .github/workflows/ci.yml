name: GymIntel CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock flake8 black isort

    - name: Set up test environment
      run: |
        # Create test .env file with dummy API keys for testing
        echo "YELP_API_KEY=test_yelp_key_for_ci" > .env
        echo "GOOGLE_PLACES_API_KEY=test_google_key_for_ci" >> .env

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --line-length=127 *.py

    - name: Check import sorting with isort
      run: |
        isort --check-only --line-length=127 *.py

    - name: Run smoke tests
      run: |
        python3 -c "
        import sys
        sys.path.append('.')

        # Test imports
        try:
            from gym_finder import GymFinder
            from yelp_service import YelpService
            from google_places_service import GooglePlacesService
            from run_gym_search import run_gym_search
            print('‚úÖ All imports successful')
        except Exception as e:
            print(f'‚ùå Import error: {e}')
            sys.exit(1)

        # Test instance creation
        try:
            gym_finder = GymFinder()
            yelp = YelpService('test_key')
            google = GooglePlacesService('test_key')
            print('‚úÖ Instance creation successful')
        except Exception as e:
            print(f'‚ùå Instance creation error: {e}')
            sys.exit(1)

        # Test basic methods (without API calls)
        try:
            normalized = gym_finder.normalize_address('123 Test St')
            phone = gym_finder.normalize_phone('(555) 123-4567')
            similarity = gym_finder.token_based_name_similarity('Gym A', 'Gym B')
            print('‚úÖ Basic methods working')
        except Exception as e:
            print(f'‚ùå Method error: {e}')
            sys.exit(1)

        print('üéâ All smoke tests passed!')
        "

    - name: Run unit tests with pytest
      run: |
        # Run tests with mocking to avoid real API calls
        python -m pytest test_gym_finder.py -v --tb=short --disable-warnings

    - name: Run integration tests (limited)
      run: |
        python3 -c "
        import sys
        sys.path.append('.')

        # Test core functionality without API calls
        from gym_finder import GymFinder

        try:
            gym_finder = GymFinder()

            # Test address normalization
            result = gym_finder.normalize_address('123 Main Street')
            assert result == '123 main st', f'Expected \"123 main st\", got \"{result}\"'

            # Test phone normalization
            result = gym_finder.normalize_phone('(555) 123-4567')
            assert result == '5551234567', f'Expected \"5551234567\", got \"{result}\"'

            # Test coordinate estimation
            lat, lng = gym_finder.estimate_coordinates_from_address('123 Test St, NY 10001')
            assert lat is not None and lng is not None, 'Coordinate estimation failed'

            # Test confidence scoring methods
            confidence = gym_finder.token_based_name_similarity('Planet Fitness', 'Planet Fitness Gym')
            assert confidence > 0, 'Token similarity should be > 0'

            print('‚úÖ Integration tests passed!')

        except Exception as e:
            print(f'‚ùå Integration test error: {e}')
            sys.exit(1)
        "

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll

    - name: Check for known vulnerabilities with Safety
      run: |
        pip install -r requirements.txt
        safety scan --json --output safety-report.json || true
        safety scan --continue-on-error

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      run: |
        echo "YELP_API_KEY=test_yelp_key_for_ci" > .env
        echo "GOOGLE_PLACES_API_KEY=test_google_key_for_ci" >> .env

    - name: Run performance baseline test
      run: |
        python3 -c "
        import time
        import sys
        sys.path.append('.')

        from gym_finder import GymFinder

        # Test method performance (without API calls)
        gym_finder = GymFinder()

        # Address normalization performance
        start = time.time()
        for i in range(1000):
            gym_finder.normalize_address(f'{i} Main Street, Suite {i}, NYC')
        address_time = time.time() - start

        # Phone normalization performance
        start = time.time()
        for i in range(1000):
            gym_finder.normalize_phone(f'(555) {i:03d}-{i:04d}')
        phone_time = time.time() - start

        # Name similarity performance
        start = time.time()
        for i in range(100):
            gym_finder.token_based_name_similarity(f'Gym {i}', f'Fitness {i}')
        similarity_time = time.time() - start

        print(f'üìä Performance Results:')
        print(f'Address normalization: {address_time:.3f}s (1000 calls)')
        print(f'Phone normalization: {phone_time:.3f}s (1000 calls)')
        print(f'Name similarity: {similarity_time:.3f}s (100 calls)')

        # Performance thresholds (fail if too slow)
        if address_time > 1.0:
            print(f'‚ùå Address normalization too slow: {address_time:.3f}s > 1.0s')
            sys.exit(1)
        if phone_time > 1.0:
            print(f'‚ùå Phone normalization too slow: {phone_time:.3f}s > 1.0s')
            sys.exit(1)
        if similarity_time > 5.0:
            print(f'‚ùå Name similarity too slow: {similarity_time:.3f}s > 5.0s')
            sys.exit(1)

        print('‚úÖ All performance tests passed!')
        "

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install pylint mypy radon
        pip install -r requirements.txt

    - name: Run PyLint
      run: |
        pylint --disable=C0114,C0116,R0903,R0913 *.py || true

    - name: Check cyclomatic complexity with Radon
      run: |
        radon cc *.py -s -a
        radon mi *.py -s

    - name: Generate test coverage report
      if: github.event_name == 'pull_request'
      run: |
        pip install coverage
        echo "# Test Coverage Report" > coverage_comment.md
        echo "" >> coverage_comment.md
        echo "This PR includes the following test coverage:" >> coverage_comment.md
        echo "" >> coverage_comment.md
        echo "\`\`\`" >> coverage_comment.md
        python -m coverage run test_gym_finder.py 2>/dev/null || echo "Coverage collection completed"
        python -m coverage report 2>/dev/null || echo "No coverage data available"
        echo "\`\`\`" >> coverage_comment.md

  documentation-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check documentation files
      run: |
        # Check that key documentation files exist
        files=("README.md" "ARCHITECTURE.md" "TESTING.md" "requirements.txt")

        for file in "${files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          else
            echo "‚úÖ Found: $file"
          fi
        done

        # Check that README has minimum content
        if [ $(wc -l < README.md) -lt 50 ]; then
          echo "‚ùå README.md too short (< 50 lines)"
          exit 1
        fi

        echo "‚úÖ Documentation check passed!"

  notification:
    runs-on: ubuntu-latest
    needs: [test, security-scan, performance-test, code-quality, documentation-check]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security-scan.result == 'success' }}
      run: |
        echo "üéâ All CI checks passed! PR is ready for review."

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security-scan.result == 'failure' }}
      run: |
        echo "‚ùå CI checks failed. Please review the errors above."
        exit 1
